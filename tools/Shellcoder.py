import os
import re
import sys
import subprocess
import argparse

def to_hex_str(string):
	return "".join(["\\x"+string[i]+string[i+1] for i in range(0,len(string)-1,2)])

def check_nasm():
	print("[*] Checking for nasm!\n")

	nasm_path = "C:\\Program Files (x86)\\nasm\\nasm.exe"
	ndiasm_path = "C:\\Program Files (x86)\\nasm\\ndisasm.exe"

	if not os.path.exists(nasm_path):
		print(f"[!] NASM path is invalid: {nasm_path}!\n")
		sys.exit(-1)

	if not os.path.exists(ndiasm_path):
		print(f"[!] NDIASM path is invalid: {ndiasm_path}!\n")
		sys.exit(-1)

def nasm2shellcode(asm):

	shellcode = ""
	shellcode_temp = []
	pattern = re.compile("([0-9A-F]{8})\s*([^\s]*)\s*(.*)")

	for i in asm.splitlines():
		match = pattern.match(i)
		if match:
			shellcode_bytes = match.groups()
			print(shellcode_bytes[1])
			sc = f"{to_hex_str(shellcode_bytes[1])}"
			shellcode_temp += sc

	shellcode = ""
	for sc in shellcode_temp:
		shellcode += sc
	
	return shellcode

def disassemble_shellcode(asm_obj_file):
	print("[*] Dissasembling binary file!\n")

	ndiasm_path = "C:\\Program Files (x86)\\nasm\\ndisasm.exe"

	ndiasm_args = f"{ndiasm_path} -b 64 {asm_obj_file}"
	result = subprocess.Popen(ndiasm_args.split(" "),
										 stdout=subprocess.PIPE,
										 shell=False)
	result = result.stdout.read().decode()
	
	shellcode = ""
	pattern = re.compile("([0-9A-F]{8})\s*([^\s]*)\s*(.*)")
	max_padding = 0
	line = result.split("\r\n")

	for i in line:
		for l in i.splitlines():
			match = pattern.match(l)
			if match:
				shellcode_bytes = match.groups()
				sc = f"{to_hex_str(shellcode_bytes[1])}"
	
	for i in line:
		shellcode += nasm2shellcode(i)

	with open("shellcode.txt", 'w') as f:
		f.write("shellcode[] = \n")
		f.write(shellcode)
		f.close()

def main():
	print("[*] Shellcoder!\n")

	check_nasm()

	asm_file = "C:\\Users\\linxz\\source\\repos\\kernel-exploits\\token_steal_x64_rs1.bin" 

	disassemble_shellcode(asm_file)

if __name__ == "__main__":
	main()
